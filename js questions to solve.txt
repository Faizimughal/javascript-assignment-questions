===================================Array Methods=======================================




let numbers = [3, 6, 8, 12, 15, 21, 28];
👉 isme se sirf even numbers nikal kar ek naye array me save karo.

let numbers = [3, 6, 8, 12, 15, 21, 28];
evenArray=[];
numbers.forEach((num)=>{
if(num%2==0){
evenArray.push(num);
console.log(evenArray)
}
})


let nums = [5, 10, 15, 20, 25];
👉 iska sum nikalna hai using reduce.

let sum=nums.reduce((acc,value)=>acc+value,0);
console.log(sum);

let fruits = ["apple", "banana", "mango", "grapes"];
👉 har fruit ke naam ka pehla letter capital karo.

let capitalText=[]
fruits.forEach((fruit)=>{
capitalText.push(fruit.charAt(0).toUpperCase()+fruit.slice(1))
})
console.log(capitalText);


🔹Easy Level

1.Find the sum of all numbers in an array.         ✔

2.Find the largest and smallest number in an array. ✔  

3.Reverse an array without using .reverse().   ✔

4.Count how many times a specific number appears in an array.  ✔

5.Remove duplicates from an array.    ✔

6.Check if an array is palindrome (e.g. [1,2,3,2,1]). ✔

7.Merge two arrays and remove duplicates.  ✔

8.Find the second largest number in an array.   ✔

9.Rotate an array by 1 position (e.g. [1,2,3,4] → [4,1,2,3]).  ✔

10.Count even and odd numbers in an array.   ✔

🔹 Medium Level

1.Find the frequency of each element in an array.     ✔

2.Flatten a nested array (e.g. [1,[2,3],[4,[5]]] → [1,2,3,4,5]). ✔

3.Find the missing number in an array (e.g. [1,2,3,5] → 4).   ✔

4.Find the intersection of two arrays (common elements).   ✔

5.Find the union of two arrays.   ✔

6.Check if two arrays are equal (same elements, any order).  ✔

7.Move all zeros to the end of an array (e.g. [0,1,0,3,12] → [1,3,12,0,0]).  ✔

8.Find the longest increasing subarray.   ✔

9.Find the pairs in an array whose sum is equal to a target.  

10.Check if array contains any duplicates.

🔹 Hard Level

1.Find the majority element (appears more than n/2 times).

2.Find the maximum product subarray.

3.Find the subarray with the largest sum (Kadane’s Algorithm).

4.Rotate an array by k positions.

5.Find all triplets with sum = 0 (3Sum problem).

6.Find the first missing positive number.

7.Find the minimum difference between any two elements.

8.Given a sorted array, remove duplicates in-place.

9.Find the peak element (greater than neighbors).

10.Find the longest consecutive sequence in an array.

⚡ Suggestion:

Easy se start karo → phir medium → phir hard

Pehle for loop se try karo

Phir map, filter, reduce, forEach se solve karne ki practice karo




1.shift,unshift
2.push,pop
3.sort,length,reduce,split,slice,concat,substr,every,some,match,matchAll,indexof,find,filter,findlast,forEach,join,delete,copywithin,


let a= new Map[name:"faizan",age:24]
a.keys(); result= name,age;
a.values();  result=faizan,24;


let numbers = [3, 6, 8, 12, 15, 21, 28];
let reverseArr=numbers.reverse();
console.log(reverseArr);  //[28,21,15,12,8,6,3]

let numbers = [3, 6, 8, 12, 15, 21, 28];
let sortArr=numbers.sort();
console.log(sortArr)    // [3,6,8,12,15,21,28]

let numbers = [3, 6, 8, 12, 15, 21, 28];
let fillArr=numbers.fill(0);
console.log(fillArr);  //[0,0,0,0,0,0,0];

let a= new Map[name:"faizan",age:24]
let values= from(a as value)=>{console.log(a)};
//faizan,24 

let numbers = [3, 6, 8, 12, 15, 21, 28]; after shift();
result=6, 8, 12, 15, 21, 28


let numbers = [3, 6, 8, 12, 15, 21, 28];
numbers.copywithin(1,5);
result= 3,15,8,12,15,21,28

let numbers = [3, 6, 8, 12, 15, 21, 28];
let b= numbers.some((x)=>x==3);
console.log(b);       //true


let numbers = [3, 6, 8, 12, 15, 21, 28];
let b=numbers.every((x)=>x>10);
console.log(b);      //false


let numbers = [3, 6, 8, 12, 15, 21, 28];
let value= numbers.splice(4,2,"new");
console.log(value)      //[15,21]
console.log(numbers)    // [3,6,8,12,new,28]

let numbers = [3, 6, 8, 12, 15, 21, 28];
let value= numbers.splice(4,2,"new","khurram");
console.log(value)      //[15,21]
console.log(numbers)    //[3,6,8,12,new,khurram,28]

let numbers = [3, 6,[ 8, 12] 15, [23], 28];
let flatArr=numbers.flat();
console.log(flatArr);  //   [3, 6, 8, 12 15, 23, 28]

               0  1  2   3   4   5   6
let numbers = [3, 6, 8, 12, 15, 21, 28];
let subStr=numbers.slice(1,5);
console.log(subStr);     // [6,8,12,15] 

let numbers = [3, 6, 8, 12, 15, 21, 28];
numbers.findIndex(num=>num==12);
result //3

let numbers = [3, 6, 8, 12, 15, 21, 28];
let b = numbers.indexOf(12)  //result=3


let numbers = [3, 6, 8, 12, 15, 21, 28];
let num = numbers.find((x)=>x>12);
console.log(num)    //15   

let numbers = [3, 6, 8, 12, 15, 21, 28];
let num = numbers.filter((x)=>x>12);
console.log(num)    //15,21,28

let numbers = [3, 6, 8, 12, 15, 21, 28];
let b = numbers.includes(14);
console.log(b)         //result = false

person{
    name:"faizan",
    age:24,
    country:"Paksitan"
}
console.log(Object.entries());

output
 [
  ["name", "faizan"],
  ["age", 24],
  ["country", "Pakistan"]
]

let numbers = [3, 6, 8, 12, 15, 21, 28];
console.log(Array.isArray(numbers));
//true

let numbers = [3, 6, 8, 12, 15, 21, 28];
let reverseStr=[];
for(let i=0;i<numbers.length;i++){
let num = numbers[i];
reverseStr.unshift(num);
  }
  console.log(reverseStr);

  console.log()     //12:2,10:2,13:1,14:3,15:1,2:1


  let numbers = [12, 10, 13, 10, 14, 14, 14, 15, 2, 12];
  let result = {};

numbers.forEach(num => {
  if (result[num]) {
    result[num]++;  // agar number pehle se hai to count badhao
  } else {
    result[num] = 1; // pehli dafa aaye to 1 set karo
  }
});

console.log(result);



  let numbers = [12, 10, 13, 10, 14, 14, 14, 15, 2, 12];
let newArray= new Set(...numbers);
console.log(newArray);


6.Check if an array is palindrome (e.g. [1,2,3,2,1]).
let numbers=[1,2,3,2,1];
let newArr=numbers.split("").reverse().join("");
if(newArr==numbers){
    console.log("this is palindrome array");
}else{
    console.log("this is not a palindrome array");
}


let numbers = [10,12,13,14,15,16];
let newNumbers = [10,12,13,13,,14,18,19];
let mergeArr = numbers.concat(newNumbers);
let uniqueArr= [...new Set(mergeArr)];
console.log(uniqueArr);

8.Find the second largest number in an array.

let numbers = [10,12,13,14,15,16];
let largestNum = Math.max(...numbers);
let secondLargestNum = Math.max(...numbers.filter(num => num !== largestNum));
console.log(secondLargestNum);


10.Count even and odd numbers in an array.

let numbers =[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];
let evenNumbers=[];
let oddNumbers=[];
numbers.forEach((num)=>{
  if(num%2==0)
  evenNumbers.unshift(num);
  else
  oddNumbers.unshift(num);
})
console.log("even numbers in an array:",evenNumbers.length,"oddNumbers in an array:",oddNumbers.length)


2.Flatten a nested array (e.g. [1,[2,3],[4,[5]]] → [1,2,3,4,5]).

let arr=[1,[2,3],[4,[5]]];
let flattenArr=arr.flat();
console.log(flattenArr);



3.Find the missing number in an array (e.g. [1,2,3,5] → 4). 

let numbers = [1,2,3,4,5,8,9]
let b = numbers.forEach((num)=>{
  let missingNum=num+1;
  if(numbers has missingNum)
  console.log("no any missing Number")
  else 
  console.log(missingNum)
})


4.Find the intersection of two arrays (common elements).

let Arr1=["apple","mango","banana","pineapple","orange","grapes"];
let Arr2=["apple","mango","banana","orange","melon","watermelon"];
console.log(commonFruits);

let Arr1=[1,2,3,4,5];
let Arr2=[5,4,2,1,3];
if(Arr1.sort()===Arr2.sort())
console.log("both are same")


9.Find the pairs in an array whose sum is equal to a target.  
let arr=[1,2,3,4,5,6,7];
let target=10;
let found=false;
let seen = new Set();
arr.for(let num of arr){
  let complement=target-num;
  if(seen.has(complement)){
    console.log(`pair is found:${num},${complement}`);
    found=true;
  }
  seen.add(num)
}
if(!found){
  console.log(`pair is not found`);
}

=============================String Methods=============================



🔤 Basic Info Methods

.length → property, not a method, gives number of characters.

.charAt(index) → character at given position.

.charCodeAt(index) → UTF-16 code of character.

.codePointAt(index) → Unicode code point of character.

String.fromCharCode(num1, num2, …) → create string from UTF-16 codes.

String.fromCodePoint(num1, num2, …) → create string from Unicode points.

🔍 Searching & Checking

.indexOf(substring, start?) → first occurrence index.

.lastIndexOf(substring, start?) → last occurrence index.

.includes(substring, start?) → true/false if found.

.startsWith(substring, start?) → check beginning.

.endsWith(substring, length?) → check ending.

.match(regex) → array of matches.

.matchAll(regex) → iterator of matches.

.search(regex) → index of first regex match.

✂️ Extracting Parts

.slice(start, end?) → substring by index.

.substring(start, end?) → similar to slice (no negatives).

.substr(start, length?) → old, not recommended, but still works.

🛠 Manipulating

.replace(searchValue, newValue) → replace first match.

.replaceAll(searchValue, newValue) → replace all matches.

.concat(str1, str2, …) → join strings (but + is used more).

.repeat(count) → repeat string.

.padStart(targetLength, padString?) → add padding at start.

.padEnd(targetLength, padString?) → add padding at end.

.trim() → remove spaces from both ends.

.trimStart() / .trimLeft() → remove leading spaces.

.trimEnd() / .trimRight() → remove trailing spaces.

.split(separator, limit?) → convert into array.

🔄 Changing Case

.toUpperCase() → all uppercase.

.toLowerCase() → all lowercase.

.toLocaleUpperCase() → locale-based uppercase.

.toLocaleLowerCase() → locale-based lowercase.

📦 Other Utilities

.valueOf() → primitive string value.

.toString() → convert to string (works on objects too).

.normalize(form?) → Unicode normalization.

.localeCompare(str) → compare strings according to locale.

.at(index) → newer method, allows negative indexing.


============================Questions of strings Regarding to Interview========================

==========🔤 Basics & Fundamentals

1.How do you find the length of a string in JavaScript?

2.Difference between .slice(), .substring(), and .substr()?

3.What’s the difference between == and === when comparing strings?

4.How do you check if a string contains a substring?

5.What’s the difference between .charAt() and using bracket notation (str[index])?

6.What is .at() and how is it different from bracket notation?

===========🔍 Searching & Matching

1.How do you find the first/last index of a substring?

2.How do you check if a string starts with or ends with a specific substring?

3.How do .search() and .indexOf() differ?

4.How do .match() and .matchAll() differ?

5.How would you count the occurrences of a word in a string?
 
=======✂️ Extraction & Manipulation

1.Extract a part of a string using .slice() vs .substring().

2.How do you replace all occurrences of a substring in ES6+?

3.What’s the difference between .replace() and .replaceAll()?

4.How do you split a string into words?

5.How do you reverse a string in JavaScript?

================🔄 Transformations

1.Convert a string to uppercase / lowercase.

2.Remove whitespace from both ends of a string.

3.How do .trim(), .trimStart(), and .trimEnd() differ?

4.How do .padStart() and .padEnd() work? Give an example.

5.How would you mask a credit card number except last 4 digits?

===========🧠 Tricky & Advanced

1.Difference between primitive strings and String objects (new String("..."))?

2.Explain .localeCompare() with an example.

3.What is .normalize() used for in Unicode strings?

4.What’s the difference between .toUpperCase() and .toLocaleUpperCase()?

5.How would you handle emojis or characters outside the BMP (like "👩‍💻".length === ?)

6.Why does "abc" == new String("abc") return true but "abc" === new String("abc") return false?

=============⚡ Coding-Style Practice Questions

1.Write a function to check if a string is a palindrome. ✔

2.Write a function to capitalize the first letter of each word in a sentence.  ✔

3.Write a function to find the longest word in a string. ✔

4.Write a function to remove duplicate characters from a string. ✔

5.Write a function to check if two strings are anagrams. ✔

6.Write a function to reverse words in a sentence ("hello world" → "world hello"). ✔

7.Write a function to count vowels and consonants in a string. ✔

8.Write a function to compress a string ("aaabbc" → "a3b2c1").   ✔

=============🧑‍💻 Practical Interview Questions on Strings

1.Reverse a string    
Input: "hello" → Output: "olleh"                   ✔

2.Check if a string is a palindrome   ✔
Input: "madam" → Output: true

3.Count vowels and consonants in a string
Input: "JavaScript" → Output: Vowels: 3, Consonants: 7   ✔

4.Find the first non-repeating character   
Input: "aabbcde" → Output: "c"                    ✔

5.Check if two strings are anagrams       ✔
Input: "listen", "silent" → Output: true

6.Capitalize the first letter of each word
Input: "hello world from js" → Output: "Hello World From Js" ✔

7.Find the longest word in a sentence
Input: "The quick brown fox jumped" → Output: "jumped" ✔

8.Remove all duplicate characters
Input: "programming" → Output: "progamin"   ✔

9.Check if a string contains only digits
Input: "12345" → Output: true
Input: "123a5" → Output: false         ✔

9.Extract numbers from a string
Input: "Order number: 12345" → Output: 12345    ✔

==========⚡ Trickier / Advanced Practical Qs

1.Count occurrences of each character
Input: "apple" → Output: { a:1, p:2, l:1, e:1 }   ✔

2.Find the most frequent character
Input: "hello world" → Output: "l"           ✔

3.Mask a credit card number
Input: "1234567812345678" → Output: "************5678"    ✔

4.Remove all whitespaces
Input: " hello world " → Output: "helloworld"           ✔

5.Check if a string contains only alphabets
Input: "HelloWorld" → Output: true              ✔

6.Compress a string (Run-length encoding)   ✔
Input: "aaabbcddd" → Output: "a3b2c1d3"     

7.Reverse words in a sentence
Input: "hello world" → Output: "world hello"     ✔

8.Find all substrings of a string
Input: "abc" → Output: ["a", "b", "c", "ab", "bc", "abc"]      ✔

9.Convert snake_case to camelCase
Input: "hello_world_js" → Output: "helloWorldJs" ✔

10.Check if a string ends with another string without using .endsWith()
Input: "JavaScript", "Script" → Output: true      ✔

================================Object Methods========================
---

## 📌 Property Access

* **`Object.keys(obj)`** → saare keys array me.
* **`Object.values(obj)`** → saare values array me.
* **`Object.entries(obj)`** → key-value pairs array me.
* **`Object.fromEntries(arr)`** → array of key-value pairs → object.

---

## 📌 Copying & Cloning

* **`Object.assign(target, source)`** → objects ko merge/copy karna.
* **Spread Operator `{...obj}`** → modern shorthand (interviews me poocha jata hai).

---

## 📌 Object Control

* **`Object.freeze(obj)`** → object fully immutable (no add/update/delete).
* **`Object.seal(obj)`** → add/delete nahi, bas update allowed.

---

## 📌 Property Descriptors

* **`Object.getOwnPropertyDescriptor(obj, key)`** → ek property ke attributes check karna.
* **`Object.defineProperty(obj, key, descriptor)`** → property ko custom attributes ke sath define karna.

---

## 📌 Prototype & Inheritance

* **`Object.create(proto)`** → naya object with given prototype.
* **`Object.getPrototypeOf(obj)`** → object ka prototype lena.
* **`Object.setPrototypeOf(obj, proto)`** → prototype change karna.

---

## 📌 Checking

* **`Object.hasOwn(obj, key)`** → check karo property directly object me hai ya nahi.
* **`obj.hasOwnProperty(key)`** → purana lekin abhi bhi important method.
* **`Object.is(val1, val2)`** → strict comparison (`NaN`, `+0/-0` cases handle karta hai).

